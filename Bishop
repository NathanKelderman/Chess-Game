package chess;

/*****************************************************************************
 * This class holds the properties for the Bishop chess piece and it also 
 * includes other information necessary to use the Bishop.
 * 
 * @author Matthew Shampine and Nathan Kelderman
 ****************************************************************************/
public class Bishop extends ChessPiece {
	
	/** This is the value of the Bishop used for the AI to make decisions 
	 * about the game */
	private final int PIECE_WORTH = 4;

	/*************************************************************************
	 * Default constructor for the Bishop class which sets up a bishop for 
	 * each player.
	 * 
	 * @param player this is the current player that the piece is assigned to
	 ************************************************************************/
	protected Bishop(Player player) {
		super(player);
	}

	/*************************************************************************
	 * Getter method that returns the type of piece that it is. This returns 
	 * a bishop.
	 * 
	 * @see chess.ChessPiece#type()
	 * @return Bishop the type of piece it is
	 ************************************************************************/
	@Override
	public String type() {
		return "Bishop";
	}
	
	/*************************************************************************
	 * Getter method that the AI uses to get the value of each piece to make 
	 * in game decisions.
	 * 
	 * @see chess.ChessPiece#getPieceWorth()
	 * @return PIECE_WORTH the value assigned to the current piece
	 ************************************************************************/
	@Override
	public int getPieceWorth() {
		return PIECE_WORTH;
	}

	/*************************************************************************
	 * Method that checks to see if the piece is a valid move. This uses
	 * the properties of a bishop chess piece to make sure it can make a valid 
	 * move.
	 * 
	 * @see chess.ChessPiece#isValidMove(chess.Move, chess.IChessPiece[][]) 
	 * @param move the current move that is being attempted
	 * @param board the bishop has access to the board and uses it to make 
	 * sure that it doesn't pass through chess pieces
	 ************************************************************************/
	@Override
	public boolean isValidMove(Move move, IChessPiece[][] board) {
		if (super.isValidMove(move, board))
			if (move.fromColumn < move.toColumn && move.fromRow < move.toRow
					&& (move.toRow - move.fromRow) == (move.toColumn - move.fromColumn)) {
				for (int row = (move.fromRow + 1); row < move.toRow; row++)
					for (int col = (move.fromColumn + 1); col < move.toColumn; col++)
						if (board[row][col] != null && (row - move.fromRow) == (col - move.fromColumn)) {
							return false;
						}
				return true;
			}
			else if (move.fromColumn > move.toColumn && move.fromRow > move.toRow
					&& (move.fromRow - move.toRow) == (move.fromColumn -  move.toColumn)) {
				for (int row = (move.fromRow - 1); row > move.toRow; row--)
					for (int col = (move.fromColumn - 1); col > move.toColumn; col--)
						if (board[row][col] != null && (move.fromRow - row) == (move.fromColumn - col)) {
							return false;
						}
				return true;
			}
			else if (move.fromColumn < move.toColumn && move.fromRow > move.toRow
					&& (move.fromRow - move.toRow) == (move.toColumn - move.fromColumn)) {
				for (int row = (move.fromRow - 1); row > move.toRow; row--)
					for (int col = (move.fromColumn + 1); col < move.toColumn; col++)
						if (board[row][col] != null && (move.fromRow - row) == (col - move.fromColumn)) {
							return false;
						}
				return true;
			}
			else if (move.fromColumn > move.toColumn && move.fromRow < move.toRow
					&& (move.toRow - move.fromRow) == (move.fromColumn - move.toColumn)) {
				for (int row = (move.fromRow + 1); row < move.toRow; row++)
					for (int col = (move.fromColumn - 1); col > move.toColumn; col--)
						if (board[row][col] != null && (row - move.fromRow) == (move.fromColumn - col)) {
							return false;
						}
				return true;
			}
		return false;
	}
}

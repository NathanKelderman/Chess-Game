package chess;

import java.util.ArrayList;
import java.util.Collections;

import javax.swing.JOptionPane;

public class ChessModel implements IChessModel {

	private IChessPiece[][] board;
	private Player player;
	private final int BOARD_SIZE = 8;
	private boolean firstMove;

	private int numMoves;
	//	private int random;
	//	private int randomList[];


	private int fourMoves;
	private boolean randomLoop;
	private ArrayList<Integer> randomList; // I added these

	private Move bestMove;
	private Move tempMove;

	//  declare other instance variables as needed

	public ChessModel() {

		board = new IChessPiece[BOARD_SIZE][BOARD_SIZE];

		numMoves = 0;
		fourMoves = 0;
		randomLoop = true;
		randomList = new ArrayList<Integer>(8);

		player = Player.BLACK; // setting the AI to black
		board[0][0] = new Rook(player);
		board[0][1] = new Knight(player);
		board[0][2] = new Bishop(player);
		board[0][3] = new Queen(player);
		board[0][4] = new King(player);
		board[0][5] = new Bishop(player);
		board[0][6] = new Knight(player);
		board[0][7] = new Rook(player);

		for(int col = 0; col < 8; col++)
			board[1][col] = new Pawn(player);

		player = Player.WHITE;
		board[7][0] = new Rook(player);
		board[7][1] = new Knight(player);
		board[7][2] = new Bishop(player);
		board[7][3] = new Queen(player);
		board[7][4] = new King(player);
		board[7][5] = new Bishop(player);
		board[7][6] = new Knight(player);
		board[7][7] = new Rook(player);

		for(int col = 0; col < 8; col++)
			board[6][col] = new Pawn(player);

		setFirstMove(true);
	}

	public boolean isFirstMove() {
		return firstMove;
	}

	public void setFirstMove(boolean firstMove) {
		this.firstMove = firstMove;
	}

	public boolean isComplete() {
		return false;
	}

	public boolean isValidMove(Move move) {

		if (board[move.fromRow][move.fromColumn] == null) {
			JOptionPane.showMessageDialog(null, "You must click a piece!");
			return false;
		}


		if ((pieceAt(move.fromRow, move.fromColumn) != null))
			if (board[move.fromRow][move.fromColumn].isValidMove(move, board)) {

				player = player.next();
				return true;
			}

		if (board[move.fromRow][move.fromColumn].player() != player) {
			JOptionPane.showMessageDialog(null, "It is not your turn!");
			return false;
		}

		if (board[move.fromRow][move.fromColumn] == null) {
			JOptionPane.showMessageDialog(null, "You must click a piece!");
			return false;
		}
		else 
			JOptionPane.showMessageDialog(null, "Not a valid move! (" + board[move.fromRow][move.fromColumn].type() + ")");
		return false;
		// complete this comes from panel to see if first clicked spot isnt null and and right color.
	}

	public void move(Move move) {
		board[move.toRow][move.toColumn] = board[move.fromRow][move.fromColumn];
		board[move.fromRow][move.fromColumn] = null;
	}

	public boolean inCheck(Player p) {
		return false;
	}

	public Player currentPlayer() {
		return player;
	}

	public int numRows() {
		return BOARD_SIZE;
	}

	public int numColumns() {
		return BOARD_SIZE;
	}

	public IChessPiece pieceAt(int row, int col) {
		return board[row][col];
	}

	public Move ChessAIMove() {

		int moveValue = 0;
		bestMove = null;

		// Random rn = new Random();

		//		int currentValue = 0;
		//		
		//		for (int i : randomList) {
		//			random = rn.nextInt(3) + 1;
		//			if (random != currentValue) {
		//				i = random;
		//				currentValue = random;
		//			}
		//		}

		for (int i = 0; (i < 8) && randomLoop; i++) { 
			randomList.add(i); 
		} 
		if (randomLoop)
			Collections.shuffle(randomList);

		//		for (int i = 0; i < randomList.length && randomLoop;) {
		//			random = rn.nextInt(3) + 1;
		//			for (int x = 0; x < i; x++)
		//				if (!(Arrays.asList(randomList[i]).contains(random))) {
		//					randomList[i] = random;
		//					i++;
		//				}
		//		}

		randomLoop = false;

		if (numMoves < 4) {
			switch (randomList.get(fourMoves)) {
			case 0: bestMove = new Move(0, 1, 2, 0);
			
			fourMoves++;
			break;
			case 1: bestMove = new Move(1, 1, 3, 1);
			fourMoves++;
			break;
			case 2: bestMove = new Move(1, 3, 2, 3);
			fourMoves++;
			break;
			case 3: bestMove = new Move(0, 6, 2, 5);
			fourMoves++;
			break;	
			case 4: bestMove = new Move(1, 3, 3, 3);
			fourMoves++;
			break;
			case 5: bestMove = new Move(1, 4, 2, 4);
			fourMoves++;
			break;
			case 6: bestMove = new Move(1, 6, 2, 6);
			fourMoves++;
			break;
			case 7: bestMove = new Move(1, 7, 3, 7);
			fourMoves++;
			break;
			}
		}
		else
			for (int row = 0; row < BOARD_SIZE; row++)
				for (int col = 0; col < BOARD_SIZE; col++) {
					int temp = ChessAI(board[row][col]);
					if (temp > moveValue && board[row][col].player() == player.BLACK) {
						moveValue = temp;
						bestMove = tempMove;
					}
				}
		player = player.next();
		numMoves++;
		return bestMove;
	}

	public int ChessAI(IChessPiece AIBoard) {

		int moveValue = -1;
		int tempValue = -1;
		tempMove = null;

		for (int row = 0; row < BOARD_SIZE; row++) {
			for (int col = 0; col < BOARD_SIZE; col++) {
				if (board[row][col] == AIBoard)
					for (int r = 0; r < BOARD_SIZE; r++) {
						for (int c = 0; c < BOARD_SIZE; c++) {
							Move temp = new Move(row, col, r, c);
							if (isValidMoveAI(temp)) {
								if (pieceAt(r, c) != null)
									moveValue = AIBoard.getPieceWorth() + board[r][c].getPieceWorth();
								else
									moveValue = AIBoard.getPieceWorth();

								if (moveValue > tempValue) {
									tempValue = moveValue;
									tempMove = temp;
								}
							}
						}
					}
			}
		}
		return tempValue;
	}

	public boolean isValidMoveAI(Move move) {

		if ((pieceAt(move.fromRow, move.fromColumn) != null))
			if (board[move.fromRow][move.fromColumn].isValidMove(move, board))
				return true;

		if (board[move.fromRow][move.fromColumn] == null)
			return false;

		return false;
	}

	public boolean equals(Object other) {
		Move temp = (Move) other;
		if (temp == null)
			throw new NullPointerException();

		if (temp.fromColumn != bestMove.fromColumn && temp.toColumn != bestMove.toColumn 
				&& temp.fromRow != bestMove.fromRow && temp.toRow != bestMove.toRow)
			return true;
		return false;
	}
}

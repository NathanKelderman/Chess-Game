package Project_4;

import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.Scanner;

/****************************************************************************
 * 
 * This class allows the user to enter in a message and mix it up and then
 * save it to a file to be used in the unMix program.
 * 
 * @author Nathan Kelderman
 * @version 1.0
 ***************************************************************************/
public class Mix implements IMix{
	/** The message from the user */
	public String userMessage;
	/** The linked list that stores each character of the message */
	public LinkedList<Character> link;
	/** The linked list that stores all the clipboards */
	public LinkedList<LinkedList<Character>> clipboards;
	/** The linked list that stores what is in each clipboard */
	public LinkedList<Character> clipboard;
	Scanner scan;
	/** Boolean to see if the program has saved the file or not */
	boolean saved;
	/** The linked list that holds all the undo commands */
	public LinkedList<String> undoCommands;

	/***********************************************************************
	 *
	 * This method initializes the linked lists.
	 * 
	 ***********************************************************************/
	public Mix() {
		link = new LinkedList<Character>();
		undoCommands = new LinkedList<String>();
		saved = false;
		clipboard = new LinkedList<Character>();
	}
	
	/***********************************************************************
	 *
	 * This method is the main method that runs the program.
	 * 
	 * @param args
	 * 
	 ***********************************************************************/
	public static void main(String args[]) {
		Mix m = new Mix();
		m.mixture();
	}

	/***********************************************************************
	 *
	 * This method saves the undoCommands to a file.
	 * 
	 * @param filename takes in the desired filename
	 * 
	 * @throws Exception
	 ***********************************************************************/
	public void saveToFile(String fileName) {
		PrintWriter out = null;
		try {
			out = new PrintWriter(new BufferedWriter(new 
					FileWriter(fileName)));
		} 
		catch (Exception e) {
			e.printStackTrace();
		}
		//cycles through undo commands and prints them onto new lines in the
		//file
		Node<String> temp = undoCommands.top();
		while( temp != null ) {
			out.println(temp.getData());
			temp = temp.getNext();
		}
		out.close();
		saved = true;
	}

	/***********************************************************************
	 * 
	 * This method asks for the initial message to be mixed up and then 
	 * continuously asks for commands until the user either saves the file or
	 * quits
	 * 
	 ***********************************************************************/
	public void mixture() {

		scan = new Scanner(System.in);
		boolean validInput = false;
		String s;
		//keeps asking for input until a valid one is entered
		while (validInput == false){
			System.out.print("Enter in initial message to mix up: ");
			s = scan.nextLine();
			if ( !s.equals("")) {
				validInput = true;
				setInitialMessage(s);
				display(false);
				displayHelp();
			}
			else
				System.out.println("Invalid input.");
		}
		System.out.println("\nCommand: ");
		s = scan.nextLine();
		//keeps asking for commands until 'q' is entered
		while ( !s.equals("q") && !s.equals("quit")) {
			if ( !s.equals("") ) {
				processCommand(s);
			}
			else
				System.out.println("Not a valid command.");
			if ( saved )
				break;
			System.out.println("Command: ");
			s = scan.nextLine();
		}
		display(true);
	}

	/***********************************************************************
	 * 
	 * This method displays a row of numbers with the corresponding character
	 * from the message below it
	 * 
	 * @param finalPrint takes in a boolean to determine if it is the last
	 * 					 print
	 ***********************************************************************/
	
	public void display(boolean finalPrint) {
		if ( finalPrint ) {
			System.out.println("Final mixed up message: ");
			for ( int x = 0; x < link.count(); x++) {
				if ( x < 10)
					System.out.print("  " + x);
				else
					System.out.print(" " + x);
			}
			System.out.println("");
			link.display();
		}
		else {
			System.out.println("Message:");
			for ( int x = 0; x < link.count(); x++) {
				if ( x < 10)
					System.out.print("  " + x);
				else
					System.out.print(" " + x);
			}
			System.out.println("");
			link.display();
		}
	}

	/***********************************************************************
	 * 
	 * This method displays all the commands and their actions
	 * 
	 ***********************************************************************/
	public void displayHelp() {
		System.out.println("\nHELP");
		System.out.println("Q\t\tmeans, quit");
		System.out.println("a c #\t\tmeans, insert char 'c' after position "
				+ "#");
		System.out.println("r c\t\tmeans, remove all characters 'c's within "
				+ "the message");
		System.out.println("c # % &\t\tmeans, starting at # to % "
				+ "(inclusive), cut to clipboard &");
		System.out.println("p # &\t\tmeans, paste from clipboard &, start "
				+ "at #");
		System.out.println("s filename\tmeans, to save off the set of undo"
				+ " commands into text file named \"filename\"\n");

	}

	/***********************************************************************
	 * 
	 * This method changes the initial message from a string to a linked list
	 * 
	 * @param message is the users message
	 ***********************************************************************/
	@Override
	public void setInitialMessage(String message) {	
		char[] c = message.toCharArray();
		int count = c.length - 1;
		for ( int x = c.length; x > 0; x--) {
			link.addAtTop(c[count]);
			count--;
		}
	}
	
	/***********************************************************************
	 * 
	 * This method processes all the commands given by the user
	 * 
	 * @param command is the command in the form of a string
	 * @return String returns the message after the changes
	 ***********************************************************************/
	@Override
	public String processCommand(String command) {
		if ( command.length() > 0 ){
			String s1 = null, s2 = null, s3 = null, s4 = null;
			int count = 0;
			//splits up command into 4 parts
			for ( String s: command.split(" ")) {
				switch (count) {
					case 0: s1 = s;
							count++;
							break;
					case 1: s2 = s;
							count++;
							break;
					case 2: s3 = s;
							count++;
							break;
					case 3: s4 = s;
							count++;
							break;
				}
			}
			//checks if the user is adding a letter
			if ( s1.charAt(0) == 'a' && Character.isLetter(s2.charAt(0)) &&
					Character.isDigit(s3.charAt(0))){
				if ( !link.insertAfter(Integer.parseInt(s3) , s2.charAt(0)))
					System.out.println("Not a valid command.");
				else
					undoCommands.append("r " + s2.charAt(0) + " " + 
				Integer.parseInt(s3));
			}
			//checks if the user is removing letters
			else if ( s1.charAt(0) == 'r' && s2.length() == 1 && 
					Character.isLetter(s2.charAt(0)) && s3 == null ) {
				Node temp = link.top();
				int count1 = 0;
				//cycles through each node and removes it if it finds it
				while ( temp != null) {
					if ( temp.getData().toString().charAt(0) == s2.charAt(0)) {
						link.removeAt(s2.charAt(0), count);
						undoCommands.append("a " + s2.toString() + " " + 
						count);
					}
					temp = temp.getNext();
					count1++;
				}
			}
			//checks if the user asked for help
			else if ( s1.equals("h") || s1.equals("help")){
				displayHelp();
				return link.toString();
			}
			//checks if the user wants to save
			else if ( s1.charAt(0) == 's' && s2 != null && s3 == null) {
				saveToFile(s2);
				return link.toString();
			}
			//checks if the user is copying
			else if ( command.length() > 6 && s1.charAt(0) == 'c' &&  
					Character.isDigit(s2.charAt(0))
					&& Character.isDigit(s3.charAt(0)) && 
					Character.isDigit(s4.charAt(0))) {
				clipboard = link.copy(Integer.parseInt(s2), 
						Integer.parseInt(s3) );
				clipboards.addToClipboard(clipboard, Integer.parseInt(s3));
			}
			else if ( s1.charAt(0) == 'p' && 
					Character.isDigit(s2.charAt(0))&& 
					Character.isDigit(s3.charAt(0)) ) {
				
			}
		}
		else 
			System.out.println("Not a valid command.");
		display(false);
		return link.toString();
	}
}

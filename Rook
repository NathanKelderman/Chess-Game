package chess;

public class Rook extends ChessPiece {

	private boolean isCastlingValid = true;
	private final int PIECE_WORTH = 5;

	protected Rook(Player player) {
		super(player);
		// TODO Auto-generated constructor stub
	}

	public boolean isCastlingValid() {
		return isCastlingValid;
	}

	public void setCastlingValid(boolean isCastlingValid) {
		this.isCastlingValid = isCastlingValid;
	}

	@Override
	public String type() {
		return "Rook";
	}

	@Override
	public int getPieceWorth() {
		return PIECE_WORTH;
	}
	
	@Override
	public boolean isValidMove(Move move, IChessPiece[][] board) {
		if (super.isValidMove(move, board))
			if ((move.fromRow > move.toRow) && move.fromColumn == move.toColumn) { //move.fromRow < move.toRow ||
				for (int row = (move.fromRow - 1); row > move.toRow; row--) {
					if (board[row][move.fromColumn] != null) {
						return false;
					}
				}
				return true;
			}
			else if ((move.fromRow < move.toRow) && move.fromColumn == move.toColumn) {
				for (int row = (move.fromRow + 1); row < move.toRow; row++) {
					if (board[row][move.fromColumn] != null) {
						return false;
					}
				}
				return true;
			}
			else if ((move.fromColumn < move.toColumn) && move.fromRow == move.toRow) {
				for (int col = (move.fromColumn + 1); col < move.toColumn; col++) {
					if (board[move.fromRow][col] != null) {
						return false;
					}
				}
				return true;
			}
			else if ((move.fromColumn > move.toColumn) && move.fromRow == move.toRow) {
				for (int col = (move.fromColumn - 1); col > move.toColumn; col--) {
					if (board[move.fromRow][col] != null) {
						return false;
					}
				}
				return true;
			}
		return false;
	}
}

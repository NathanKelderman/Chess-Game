package Project_4;

public class LinkedList<E>  {
	private Node<E> top;
	private Node<E> tail;



	public LinkedList() {
		top = null;
		tail = null;
	}

	public void addAtTop (E s) {
		// case 0, no list
		if (top == null) { 
			tail = top = new Node (s, top, null);
		}
		else { 
			// case 1: list exist....
			top = new Node (s, top, top.getPrev());
			top.getNext().setPrev(top);
		}
	}

	public void removeAt(E s, int x) {
		Node<E> temp = top;
		int count = 0;
		while ( temp != null) {
			if ( count == x) {
				if (top.getData().equals(s) && top.getNext() == null) {
					top = tail = null;
				}

				// case 1: found at top
				// sub case, more than only one element. 
				if (temp.getData().equals(s) && temp.getNext() != null) {
					temp = temp.getNext();
				}

				// case 2: look in middle
				if (temp.getData().equals(s)) {
					// found in tail pos. 
					if (temp.getNext() == tail) {
						temp.setNext(temp.getNext().getNext());
						tail = temp;
					}
					else 
						temp.setNext(temp.getNext().getNext());
				}

				temp = temp.getNext();
			}
		}
				
	}



	public void addToClipboard(LinkedList<Character> clipboard, int x) {
		//case 0, no list
		if ( top == null) { 
			tail = top = new Node(x, top, null);
			top.setClipboard(clipboard);
		}
		else {
			// case 1: list exists
			top = new Node(x, top, top.getPrev());
			top.getNext().setPrev(top);
			top.setClipboard(clipboard);
		}
	}

	public void display () {
		//prints outs the linked list
		Node temp = top;
		while (temp != null) {
			System.out.print("  " + temp.getData());
			temp = temp.getNext();
		}
		System.out.println("");
	}

	public String toString () {
		//returns the linked lsit as a string
		Node temp = top;
		String s = "";
		while (temp != null) {
			s = s + temp.getData();
			temp = temp.getNext();
		}
		return s;
	}

	public int count() {
		//counts the number of nodes in the linked list
		Node<E> temp = top;
		int count = 0;
		while (temp != null) {
			count++;
			temp = temp.getNext();
		}
		return count;
	}

	public LinkedList<E> copy(int x, int y) {
		Node<E> temp = top;
		int count = 0;
		LinkedList<E> clipboard = new LinkedList<E>();
		//cycles through linked list
		while ( temp != null) {
			//if the node is between the values (x,y) then add them to the 
			//clipboards linked list
			if ( count >= x && count <= y) {
				clipboard.addAtTop(temp.getData());
				temp = temp.getNext();
				count++;
			}
			temp = temp.getNext();
			count++;
		}
		return clipboard;
	}

	public void paste(LinkedList<String> clipboard, int x) {
		int count = 0;
		Node<String> temp = clipboard.top;
		//cycles through the clipboard
		while ( temp != null) {
			if ( count >= x && temp != null) {
				addAt((E) temp.getData(), count);
				temp = temp.getNext();
				count++;
			}
			temp = temp.getNext();
			count++;
		}
	}

	public void append (E s) {
		// case 0: no list,
		if (top == null)
			tail = top = new Node(s, null, null);
		else {
			tail.setNext(new Node(s,null, tail.getPrev()));
			tail = tail.getNext();
		}
	}

	public void addAt(E s, int i) { //adds node at a certain spot
		if ( i <= count()) {
			if ( i == -1)
				addAtTop(s);
			else if ( i == count())
				append(s);
			else {
				Node<E> temp = top;
				int count = 0;
				boolean added = false;
				while ( !added ) {
					if ( count == i) {
						temp.setNext(new Node(s, temp.getNext(), temp));
						temp.getNext().getNext().setPrev(temp.getNext());
						added = true;
					}
					count++;
					temp = temp.getNext();
				}
			}	
		}
	}

	public boolean remove (E s) {
		// case 0: no list
		if (top == null) 
			return false;

		// case 1: found at top
		// sub case, only one element. 
		if (top.getData().equals(s) && top.getNext() == null) {
			top = tail = null;
			return true;
		}

		// case 1: found at top
		// sub case, more than only one element. 
		if (top.getData().equals(s) && top.getNext() != null) {
			top = top.getNext();
			return true;
		}

		// case 2: look in middle
		Node<E> temp = top;
		while (temp.getNext() != null) {
			if (temp.getNext().getData().equals(s)) {
				// found in tail pos. 
				if (temp.getNext() == tail) {
					temp.setNext(temp.getNext().getNext());
					tail = temp;
				}
				else 
					temp.setNext(temp.getNext().getNext());
				return true;
			}

			temp = temp.getNext();
		}
		return false;
	}

	public void removeAll(E s) {
		while (remove(s));
	}
	
	public boolean insertAfter (int pos, E s) {
		if (top == null && pos == 0) {
			top = new Node(s, null, null);
			tail = top;
			return true;
		}
		if ( pos == count() - 1) {
			tail.setNext(new Node( s, null, tail));
			tail = tail.getNext();
			return true;
		}
		else {
			int counter = 0;
			Node<E> temp = top;
			while (temp != null) {
				if (counter == pos) {
					temp.setNext(new Node(s, temp.getNext(), temp));
					temp.getNext().getNext().setPrev(temp.getNext());
					return true;
				}
				counter++;
				temp = temp.getNext();
			}	
		}
		return false;
	}

	public Node<E> top() {
		return top;
	}

	public boolean hasNext(Node n) {
		if (n.getNext() != null)
			return true;
		return false;
	}
	public static void main (String[] args){
		LinkedList<String> list = new LinkedList<String>();

		list.append("pizza0");
		list.append("donuts1");
		list.append("chocolate2");
		list.append("pizza3");
		list.append("donuts4");
		list.append("chocolate5");
		list.append("pizza3");


		list.insertAfter(4, "sdf");


		list.insertAfter(3, "z");
		list.insertAfter(0, "z");
		list.insertAfter(10, "z");
		list.removeAt("z ", 0);
		list.display();

	}
}

package chess;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

public class ChessPanel extends JPanel {

	private JButton[][] board; 

	private ImageIcon rook = new ImageIcon("/home/matthew/workspace/"
			+ "ChessPrj/src/chess/White/rook.png");
	private ImageIcon pawn = new ImageIcon("/home/matthew/workspace/"
			+ "ChessPrj/src/chess/White/pawn.png");
	private ImageIcon bishop = new ImageIcon("/home/matthew/workspace/"
			+ "ChessPrj/src/chess/White/bishop.png");
	private ImageIcon knight = new ImageIcon("/home/matthew/workspace/"
			+ "ChessPrj/src/chess/White/knight.png");
	private ImageIcon queen = new ImageIcon("/home/matthew/workspace/"
			+ "ChessPrj/src/chess/White/queen.png");
	private ImageIcon king = new ImageIcon("/home/matthew/workspace/"
			+ "ChessPrj/src/chess/White/king.png");
	private ImageIcon rookB = new ImageIcon("/home/matthew/workspace/"
			+ "ChessPrj/src/chess/Black/rookB.png");
	private ImageIcon pawnB = new ImageIcon("/home/matthew/workspace/"
			+ "ChessPrj/src/chess/Black/pawnB.png");
	private ImageIcon bishopB = new ImageIcon("/home/matthew/workspace/"
			+ "ChessPrj/src/chess/Black/bishopB.png");
	private ImageIcon knightB = new ImageIcon("/home/matthew/workspace/"
			+ "ChessPrj/src/chess/Black/knightB.png");
	private ImageIcon queenB = new ImageIcon("/home/matthew/workspace/"
			+ "ChessPrj/src/chess/Black/queenB.png");
	private ImageIcon kingB = new ImageIcon("/home/matthew/workspace/"
			+ "ChessPrj/src/chess/Black/kingB.png");


	private Move move;
	private ChessModel model;
	private JPanel center;
	private final int BOARD_SIZE = 8;


	public ChessPanel() {

		ButtonListener listener = new ButtonListener();
		center = new JPanel();
		center.setLayout(new GridLayout(BOARD_SIZE, BOARD_SIZE));
		board = new JButton[BOARD_SIZE][BOARD_SIZE];

		model = new ChessModel();

		boolean white = true;

		for (int row = 0; row < model.numRows(); row++) {
			white = !white;
			for (int col = 0; col < model.numColumns(); col++) {
				board[row][col] = new JButton("");
				board[row][col].setPreferredSize(new Dimension(90, 90));
				board[row][col].addActionListener(listener);
				center.add(board[row][col]);
				if (white)
					board[row][col].setBackground(Color.WHITE);
				else
					board[row][col].setBackground(Color.DARK_GRAY);
				white = !white;
			}
		}

		add(center, BorderLayout.CENTER);
		displayBoard();
	}

	// method that updates the board
	private void displayBoard() {
		for (int row = 0; row < model.numRows(); row++) {
			for (int col = 0; col < model.numColumns(); col++) {
				if (model.pieceAt(row, col) != null){
					if (model.pieceAt(row, col).player() == Player.WHITE ){
						if (model.pieceAt(row, col).type().equals("Pawn"))
							board[row][col].setIcon(pawn);
						if (model.pieceAt(row, col).type().equals("Rook"))
							board[row][col].setIcon(rook);
						if (model.pieceAt(row, col).type().equals("Knight"))
							board[row][col].setIcon(knight);
						if (model.pieceAt(row, col).type().equals("Bishop"))
							board[row][col].setIcon(bishop);
						if (model.pieceAt(row, col).type().equals("King"))
							board[row][col].setIcon(king);
						if (model.pieceAt(row, col).type().equals("Queen"))
							board[row][col].setIcon(queen);
					}
					else if (model.pieceAt(row, col).player() == Player.BLACK ){
						if (model.pieceAt(row, col).type().equals("Pawn"))
							board[row][col].setIcon(pawnB);
						if (model.pieceAt(row, col).type().equals("Rook"))
							board[row][col].setIcon(rookB);
						if (model.pieceAt(row, col).type().equals("Knight"))
							board[row][col].setIcon(knightB);
						if (model.pieceAt(row, col).type().equals("Bishop"))
							board[row][col].setIcon(bishopB);
						if (model.pieceAt(row, col).type().equals("King"))
							board[row][col].setIcon(kingB);
						if (model.pieceAt(row, col).type().equals("Queen"))
							board[row][col].setIcon(queenB);
					}
				}
				else
					board[row][col].setIcon(null);

			}
		}
	}

	public void reset() {
		model.reset();
		displayBoard();
	}

	// add other helper methods as needed

	// inner class that represents action listener for buttons
	private class ButtonListener implements ActionListener {

		private int colMove = 0;
		private int rowMove = 0;

		public void actionPerformed(ActionEvent event) {
			for (int row = 0; row < model.numRows(); row++)
				for (int col = 0; col < model.numColumns(); col++)
					if (board[row][col] == event.getSource()){
						if (model.isCellOccupied(model.pieceAt(row, col)) || model.isFirstMove() == false) {

							if (model.isFirstMove()) {
								rowMove = row;
								colMove = col;
								model.setFirstMove(false);
								//							highlight();

							}
							else if (!model.isFirstMove()) {
								move = new Move(rowMove, colMove, row, col);

								try {
									if (model.isValidMove(move)) {
										model.move(move);
										displayBoard();
										model.move(model.ChessAIMove());
										displayBoard();
									}
								}

								catch (IllegalArgumentException e) {
									JOptionPane.showMessageDialog(null, "It is not your turn!");
								}

								catch (NullPointerException e) {
									if (model.currentPlayer() == Player.WHITE) {
										if (model.pieceAt(move.fromRow, move.fromColumn).type().equals("Pawn"))
											JOptionPane.showMessageDialog(null, "Not a valid move!", model.pieceAt(move.fromRow, move.fromColumn).type(), JOptionPane.INFORMATION_MESSAGE, pawn);
										if (model.pieceAt(move.fromRow, move.fromColumn).type().equals("Rook"))
											JOptionPane.showMessageDialog(null, "Not a valid move!", model.pieceAt(move.fromRow, move.fromColumn).type(), JOptionPane.INFORMATION_MESSAGE, rook);
										if (model.pieceAt(move.fromRow, move.fromColumn).type().equals("Knight"))
											JOptionPane.showMessageDialog(null, "Not a valid move!", model.pieceAt(move.fromRow, move.fromColumn).type(), JOptionPane.INFORMATION_MESSAGE, knight);
										if (model.pieceAt(move.fromRow, move.fromColumn).type().equals("Bishop"))
											JOptionPane.showMessageDialog(null, "Not a valid move!", model.pieceAt(move.fromRow, move.fromColumn).type(), JOptionPane.INFORMATION_MESSAGE, bishop);
										if (model.pieceAt(move.fromRow, move.fromColumn).type().equals("Queen"))
											JOptionPane.showMessageDialog(null, "Not a valid move!", model.pieceAt(move.fromRow, move.fromColumn).type(), JOptionPane.INFORMATION_MESSAGE, queen);
										if (model.pieceAt(move.fromRow, move.fromColumn).type().equals("King"))
											JOptionPane.showMessageDialog(null, "Not a valid move!", model.pieceAt(move.fromRow, move.fromColumn).type(), JOptionPane.INFORMATION_MESSAGE, king);
									}
								}
								model.setFirstMove(true);
							}
						}
					}
		}
	}
}

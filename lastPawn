
public class Pawn extends ChessPiece {

	private final int PIECE_WORTH = 1;

	protected Pawn(Player player) {
		super(player);
	}

	@Override
	public String type() {
		return "Pawn";
	}

	@Override
	public int getPieceWorth() {
		return PIECE_WORTH;
	}

	@Override
	public boolean isValidMove(Move move, IChessPiece[][] board) {
		if (super.isValidMove(move, board))
			if (player() == Player.WHITE && move.fromRow != 0) {
				if (board[move.toRow][move.toColumn] != null) { // if there's a piece in the destination
					boolean tempValid = false;
					if (move.fromColumn != 7) {
						if (board[move.toRow][move.toColumn] == board[move.fromRow-1][move.fromColumn+1]) {
							tempValid = true;
						}
					}
					if (move.fromColumn != 0)
						if (board[move.toRow][move.toColumn] == board[move.fromRow-1][move.fromColumn-1]) {
							tempValid = true;
						}
					return tempValid;
				}
				else 
					if (move.toRow == (move.fromRow - 2) && move.toColumn == move.fromColumn && move.fromRow == 6) {
						return true;
					}
					else if (move.toRow == (move.fromRow - 1) && move.toColumn == move.fromColumn) {
						return true;
					}
			}
			else if (player() == Player.BLACK && move.fromRow != 7) {
				if (board[move.toRow][move.toColumn] != null) { // if there's a piece in the destination
					boolean tempValid = false;
					if (move.fromColumn != 7) {
						if (board[move.toRow][move.toColumn] == board[move.fromRow+1][move.fromColumn+1]) {
							tempValid = true;
						}
					}
					if (move.fromColumn != 0)
						if (board[move.toRow][move.toColumn] == board[move.fromRow+1][move.fromColumn-1]) {
							tempValid = true;
						}
					return tempValid;
				}
				else 
					if (move.toRow == (move.fromRow + 2) && move.toColumn == move.fromColumn && move.fromRow == 1) {
						return true;
					}
					else if (move.toRow == (move.fromRow + 1) && move.toColumn == move.fromColumn) {
						return true;
					}
			}

		return false;
	}
}
